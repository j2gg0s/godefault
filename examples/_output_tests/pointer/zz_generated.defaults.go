//go:build !ignore_autogenerated
// +build !ignore_autogenerated

package pointer

import (
	"fmt"
	"reflect"
)

// RegisterDefaults adds defaulters functions to the given map.
// Public to allow building arbitrary maps.
// All generated defaulters are covering - they call all nested defaulters.
func RegisterDefaults(m map[reflect.Type]func(interface{})) error {
	m[reflect.TypeOf(&Tpointer{})] = func(obj interface{}) { SetObjectDefaults_Tpointer(obj.(*Tpointer)) }
	m[reflect.TypeOf(&Ttest{})] = func(obj interface{}) { SetObjectDefaults_Ttest(obj.(*Ttest)) }
	return nil
}

var m map[reflect.Type]func(interface{})

func init() {
	m = map[reflect.Type]func(interface{}){}
	RegisterDefaults(m)
}

// Default set default value for input object.
func Default(obj interface{}) error {
	fn, ok := m[reflect.TypeOf(obj)]
	if !ok {
		return fmt.Errorf("unknown type: %T", obj)
	}
	fn(obj)
	return nil
}

func SetObjectDefaults_Tpointer(in *Tpointer) {
	SetDefaults_Tpointer(in)
}

func SetObjectDefaults_Ttest(in *Ttest) {
	SetObjectDefaults_Tpointer(&in.NTP)
	if in.Tp != nil {
		SetObjectDefaults_Tpointer(in.Tp)
	}
}

//go:build !ignore_autogenerated
// +build !ignore_autogenerated

package slices

import (
	"fmt"
	"reflect"
)

// RegisterDefaults adds defaulters functions to the given map.
// Public to allow building arbitrary maps.
// All generated defaulters are covering - they call all nested defaulters.
func RegisterDefaults(m map[reflect.Type]func(interface{})) error {
	m[reflect.TypeOf(&Ttest{})] = func(obj interface{}) { SetObjectDefaults_Ttest(obj.(*Ttest)) }
	m[reflect.TypeOf(&TtestList{})] = func(obj interface{}) { SetObjectDefaults_TtestList(obj.(*TtestList)) }
	m[reflect.TypeOf(&TtestPointerList{})] = func(obj interface{}) { SetObjectDefaults_TtestPointerList(obj.(*TtestPointerList)) }
	return nil
}

var m map[reflect.Type]func(interface{})

func init() {
	m = map[reflect.Type]func(interface{}){}
	RegisterDefaults(m)
}

// Default set default value for input object.
func Default(obj interface{}) error {
	fn, ok := m[reflect.TypeOf(obj)]
	if !ok {
		return fmt.Errorf("unknown type: %T", obj)
	}
	fn(obj)
	return nil
}

func SetObjectDefaults_Ttest(in *Ttest) {
	SetDefaults_Ttest(in)
}

func SetObjectDefaults_TtestList(in *TtestList) {
	for i := range in.Items {
		a := &in.Items[i]
		SetObjectDefaults_Ttest(a)
	}
}

func SetObjectDefaults_TtestPointerList(in *TtestPointerList) {
	for i := range in.Items {
		a := in.Items[i]
		if a != nil {
			SetObjectDefaults_Ttest(a)
		}
	}
}
